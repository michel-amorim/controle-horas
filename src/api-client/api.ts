/* tslint:disable */
/* eslint-disable */
/**
 * Controle de horas
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdicionarAtividadeDto
 */
export interface AdicionarAtividadeDto {
    /**
     * 
     * @type {string}
     * @memberof AdicionarAtividadeDto
     */
    'nome': string;
    /**
     * 
     * @type {string}
     * @memberof AdicionarAtividadeDto
     */
    'descricao': string;
    /**
     * 
     * @type {string}
     * @memberof AdicionarAtividadeDto
     */
    'projetoId': string;
}
/**
 * 
 * @export
 * @interface AdicionarProjetoDto
 */
export interface AdicionarProjetoDto {
    /**
     * 
     * @type {string}
     * @memberof AdicionarProjetoDto
     */
    'nome': string;
    /**
     * 
     * @type {string}
     * @memberof AdicionarProjetoDto
     */
    'origem': string;
    /**
     * 
     * @type {string}
     * @memberof AdicionarProjetoDto
     */
    'cor': string;
    /**
     * 
     * @type {number}
     * @memberof AdicionarProjetoDto
     */
    'horasMaxima'?: number;
}
/**
 * 
 * @export
 * @interface Atividade
 */
export interface Atividade {
    /**
     * 
     * @type {string}
     * @memberof Atividade
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Atividade
     */
    'nome': string;
    /**
     * 
     * @type {string}
     * @memberof Atividade
     */
    'descricao'?: string;
    /**
     * 
     * @type {Projeto}
     * @memberof Atividade
     */
    'projeto': Projeto;
    /**
     * 
     * @type {Array<Atuacao>}
     * @memberof Atividade
     */
    'atuacoes': Array<Atuacao>;
    /**
     * 
     * @type {string}
     * @memberof Atividade
     */
    'stampCreate': string;
    /**
     * 
     * @type {string}
     * @memberof Atividade
     */
    'stampUpdate': string;
}
/**
 * 
 * @export
 * @interface Atuacao
 */
export interface Atuacao {
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'id': string;
    /**
     * 
     * @type {Atividade}
     * @memberof Atuacao
     */
    'atividade': Atividade;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'descricaoInicio'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'descricaoFim'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'inicio': string;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'fim'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'stampCreate': string;
    /**
     * 
     * @type {string}
     * @memberof Atuacao
     */
    'stampUpdate': string;
}
/**
 * 
 * @export
 * @interface AtuacaoDto
 */
export interface AtuacaoDto {
    /**
     * 
     * @type {string}
     * @memberof AtuacaoDto
     */
    'descricao': string;
    /**
     * 
     * @type {string}
     * @memberof AtuacaoDto
     */
    'atividadeId': string;
    /**
     * 
     * @type {string}
     * @memberof AtuacaoDto
     */
    'dataHora': string;
}
/**
 * 
 * @export
 * @interface Projeto
 */
export interface Projeto {
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'nome': string;
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'cor': string;
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'origem': string;
    /**
     * 
     * @type {Array<Atividade>}
     * @memberof Projeto
     */
    'atividades': Array<Atividade>;
    /**
     * 
     * @type {number}
     * @memberof Projeto
     */
    'horasMaxima'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Projeto
     */
    'concluido': boolean;
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'stampCreate': string;
    /**
     * 
     * @type {string}
     * @memberof Projeto
     */
    'stampUpdate': string;
}
/**
 * 
 * @export
 * @interface RelatorioEntradaItemDto
 */
export interface RelatorioEntradaItemDto {
    /**
     * 
     * @type {string}
     * @memberof RelatorioEntradaItemDto
     */
    'inicio': string;
    /**
     * 
     * @type {string}
     * @memberof RelatorioEntradaItemDto
     */
    'fim'?: string;
}
/**
 * 
 * @export
 * @interface RelatorioItemDto
 */
export interface RelatorioItemDto {
    /**
     * 
     * @type {number}
     * @memberof RelatorioItemDto
     */
    'dia': number;
    /**
     * 
     * @type {Array<RelatorioEntradaItemDto>}
     * @memberof RelatorioItemDto
     */
    'entradas': Array<RelatorioEntradaItemDto>;
}

/**
 * AtividadeApi - axios parameter creator
 * @export
 */
export const AtividadeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cadastra uma atividade.
         * @param {AdicionarAtividadeDto} adicionarAtividadeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerAdicionarAtividade: async (adicionarAtividadeDto: AdicionarAtividadeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adicionarAtividadeDto' is not null or undefined
            assertParamExists('atividadeControllerAdicionarAtividade', 'adicionarAtividadeDto', adicionarAtividadeDto)
            const localVarPath = `/atividade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adicionarAtividadeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtem detalhes de uma atividade.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerEncontrarAtividade: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atividadeControllerEncontrarAtividade', 'id', id)
            const localVarPath = `/atividade/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lista todas as atividades de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerListarAtividadesGeral: async (mes: number, ano: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mes' is not null or undefined
            assertParamExists('atividadeControllerListarAtividadesGeral', 'mes', mes)
            // verify required parameter 'ano' is not null or undefined
            assertParamExists('atividadeControllerListarAtividadesGeral', 'ano', ano)
            const localVarPath = `/atividade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }

            if (ano !== undefined) {
                localVarQueryParameter['ano'] = ano;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtividadeApi - functional programming interface
 * @export
 */
export const AtividadeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AtividadeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cadastra uma atividade.
         * @param {AdicionarAtividadeDto} adicionarAtividadeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atividadeControllerAdicionarAtividade(adicionarAtividadeDto: AdicionarAtividadeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atividade>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atividadeControllerAdicionarAtividade(adicionarAtividadeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtividadeApi.atividadeControllerAdicionarAtividade']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Obtem detalhes de uma atividade.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atividadeControllerEncontrarAtividade(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atividade>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atividadeControllerEncontrarAtividade(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtividadeApi.atividadeControllerEncontrarAtividade']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lista todas as atividades de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atividadeControllerListarAtividadesGeral(mes: number, ano: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Atividade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atividadeControllerListarAtividadesGeral(mes, ano, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtividadeApi.atividadeControllerListarAtividadesGeral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AtividadeApi - factory interface
 * @export
 */
export const AtividadeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AtividadeApiFp(configuration)
    return {
        /**
         * 
         * @summary Cadastra uma atividade.
         * @param {AdicionarAtividadeDto} adicionarAtividadeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerAdicionarAtividade(adicionarAtividadeDto: AdicionarAtividadeDto, options?: RawAxiosRequestConfig): AxiosPromise<Atividade> {
            return localVarFp.atividadeControllerAdicionarAtividade(adicionarAtividadeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtem detalhes de uma atividade.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerEncontrarAtividade(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Atividade> {
            return localVarFp.atividadeControllerEncontrarAtividade(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lista todas as atividades de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atividadeControllerListarAtividadesGeral(mes: number, ano: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Atividade>> {
            return localVarFp.atividadeControllerListarAtividadesGeral(mes, ano, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtividadeApi - object-oriented interface
 * @export
 * @class AtividadeApi
 * @extends {BaseAPI}
 */
export class AtividadeApi extends BaseAPI {
    /**
     * 
     * @summary Cadastra uma atividade.
     * @param {AdicionarAtividadeDto} adicionarAtividadeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtividadeApi
     */
    public atividadeControllerAdicionarAtividade(adicionarAtividadeDto: AdicionarAtividadeDto, options?: RawAxiosRequestConfig) {
        return AtividadeApiFp(this.configuration).atividadeControllerAdicionarAtividade(adicionarAtividadeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtem detalhes de uma atividade.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtividadeApi
     */
    public atividadeControllerEncontrarAtividade(id: string, options?: RawAxiosRequestConfig) {
        return AtividadeApiFp(this.configuration).atividadeControllerEncontrarAtividade(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lista todas as atividades de um ano e mes.
     * @param {number} mes 
     * @param {number} ano 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtividadeApi
     */
    public atividadeControllerListarAtividadesGeral(mes: number, ano: number, options?: RawAxiosRequestConfig) {
        return AtividadeApiFp(this.configuration).atividadeControllerListarAtividadesGeral(mes, ano, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AtuacaoApi - axios parameter creator
 * @export
 */
export const AtuacaoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finaliza uma atividade.
         * @param {string} id 
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerFinalizar: async (id: string, atuacaoDto: AtuacaoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atuacaoControllerFinalizar', 'id', id)
            // verify required parameter 'atuacaoDto' is not null or undefined
            assertParamExists('atuacaoControllerFinalizar', 'atuacaoDto', atuacaoDto)
            const localVarPath = `/atuacao/{id}/fechar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atuacaoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inicia uma atividade.
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerIniciar: async (atuacaoDto: AtuacaoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'atuacaoDto' is not null or undefined
            assertParamExists('atuacaoControllerIniciar', 'atuacaoDto', atuacaoDto)
            const localVarPath = `/atuacao`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atuacaoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtem o relatorio de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerRelatorio: async (mes: number, ano: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mes' is not null or undefined
            assertParamExists('atuacaoControllerRelatorio', 'mes', mes)
            // verify required parameter 'ano' is not null or undefined
            assertParamExists('atuacaoControllerRelatorio', 'ano', ano)
            const localVarPath = `/atuacao/relatorio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }

            if (ano !== undefined) {
                localVarQueryParameter['ano'] = ano;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtuacaoApi - functional programming interface
 * @export
 */
export const AtuacaoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AtuacaoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Finaliza uma atividade.
         * @param {string} id 
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atuacaoControllerFinalizar(id: string, atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atuacao>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atuacaoControllerFinalizar(id, atuacaoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtuacaoApi.atuacaoControllerFinalizar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inicia uma atividade.
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atuacaoControllerIniciar(atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atuacao>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atuacaoControllerIniciar(atuacaoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtuacaoApi.atuacaoControllerIniciar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Obtem o relatorio de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atuacaoControllerRelatorio(mes: number, ano: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatorioItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atuacaoControllerRelatorio(mes, ano, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AtuacaoApi.atuacaoControllerRelatorio']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AtuacaoApi - factory interface
 * @export
 */
export const AtuacaoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AtuacaoApiFp(configuration)
    return {
        /**
         * 
         * @summary Finaliza uma atividade.
         * @param {string} id 
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerFinalizar(id: string, atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig): AxiosPromise<Atuacao> {
            return localVarFp.atuacaoControllerFinalizar(id, atuacaoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inicia uma atividade.
         * @param {AtuacaoDto} atuacaoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerIniciar(atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig): AxiosPromise<Atuacao> {
            return localVarFp.atuacaoControllerIniciar(atuacaoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtem o relatorio de um ano e mes.
         * @param {number} mes 
         * @param {number} ano 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atuacaoControllerRelatorio(mes: number, ano: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RelatorioItemDto>> {
            return localVarFp.atuacaoControllerRelatorio(mes, ano, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtuacaoApi - object-oriented interface
 * @export
 * @class AtuacaoApi
 * @extends {BaseAPI}
 */
export class AtuacaoApi extends BaseAPI {
    /**
     * 
     * @summary Finaliza uma atividade.
     * @param {string} id 
     * @param {AtuacaoDto} atuacaoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtuacaoApi
     */
    public atuacaoControllerFinalizar(id: string, atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig) {
        return AtuacaoApiFp(this.configuration).atuacaoControllerFinalizar(id, atuacaoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inicia uma atividade.
     * @param {AtuacaoDto} atuacaoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtuacaoApi
     */
    public atuacaoControllerIniciar(atuacaoDto: AtuacaoDto, options?: RawAxiosRequestConfig) {
        return AtuacaoApiFp(this.configuration).atuacaoControllerIniciar(atuacaoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtem o relatorio de um ano e mes.
     * @param {number} mes 
     * @param {number} ano 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtuacaoApi
     */
    public atuacaoControllerRelatorio(mes: number, ano: number, options?: RawAxiosRequestConfig) {
        return AtuacaoApiFp(this.configuration).atuacaoControllerRelatorio(mes, ano, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjetoApi - axios parameter creator
 * @export
 */
export const ProjetoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Altera um projeto para aberto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerAbrir: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projetoControllerAbrir', 'id', id)
            const localVarPath = `/projeto/{id}/abrir`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cadastra um projeto.
         * @param {AdicionarProjetoDto} adicionarProjetoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerAdicionar: async (adicionarProjetoDto: AdicionarProjetoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adicionarProjetoDto' is not null or undefined
            assertParamExists('projetoControllerAdicionar', 'adicionarProjetoDto', adicionarProjetoDto)
            const localVarPath = `/projeto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adicionarProjetoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtem detalhes de um projeto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerEncontrar: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projetoControllerEncontrar', 'id', id)
            const localVarPath = `/projeto/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Altera um projeto para fechado.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerFechar: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projetoControllerFechar', 'id', id)
            const localVarPath = `/projeto/{id}/fechar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lista todos os projetos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerListar: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projeto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lista atividades de um projeto.
         * @param {string} projetoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerListarAtividades: async (projetoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projetoId' is not null or undefined
            assertParamExists('projetoControllerListarAtividades', 'projetoId', projetoId)
            const localVarPath = `/projeto/{projetoId}/atividades`
                .replace(`{${"projetoId"}}`, encodeURIComponent(String(projetoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjetoApi - functional programming interface
 * @export
 */
export const ProjetoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjetoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Altera um projeto para aberto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerAbrir(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projeto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerAbrir(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerAbrir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cadastra um projeto.
         * @param {AdicionarProjetoDto} adicionarProjetoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerAdicionar(adicionarProjetoDto: AdicionarProjetoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projeto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerAdicionar(adicionarProjetoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerAdicionar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Obtem detalhes de um projeto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerEncontrar(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projeto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerEncontrar(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerEncontrar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Altera um projeto para fechado.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerFechar(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projeto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerFechar(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerFechar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lista todos os projetos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerListar(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Projeto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerListar(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerListar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lista atividades de um projeto.
         * @param {string} projetoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projetoControllerListarAtividades(projetoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Atividade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projetoControllerListarAtividades(projetoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjetoApi.projetoControllerListarAtividades']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjetoApi - factory interface
 * @export
 */
export const ProjetoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjetoApiFp(configuration)
    return {
        /**
         * 
         * @summary Altera um projeto para aberto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerAbrir(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Projeto> {
            return localVarFp.projetoControllerAbrir(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cadastra um projeto.
         * @param {AdicionarProjetoDto} adicionarProjetoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerAdicionar(adicionarProjetoDto: AdicionarProjetoDto, options?: RawAxiosRequestConfig): AxiosPromise<Projeto> {
            return localVarFp.projetoControllerAdicionar(adicionarProjetoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtem detalhes de um projeto.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerEncontrar(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Projeto> {
            return localVarFp.projetoControllerEncontrar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Altera um projeto para fechado.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerFechar(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Projeto> {
            return localVarFp.projetoControllerFechar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lista todos os projetos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerListar(options?: RawAxiosRequestConfig): AxiosPromise<Array<Projeto>> {
            return localVarFp.projetoControllerListar(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lista atividades de um projeto.
         * @param {string} projetoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projetoControllerListarAtividades(projetoId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Atividade>> {
            return localVarFp.projetoControllerListarAtividades(projetoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjetoApi - object-oriented interface
 * @export
 * @class ProjetoApi
 * @extends {BaseAPI}
 */
export class ProjetoApi extends BaseAPI {
    /**
     * 
     * @summary Altera um projeto para aberto.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerAbrir(id: string, options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerAbrir(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cadastra um projeto.
     * @param {AdicionarProjetoDto} adicionarProjetoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerAdicionar(adicionarProjetoDto: AdicionarProjetoDto, options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerAdicionar(adicionarProjetoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtem detalhes de um projeto.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerEncontrar(id: string, options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerEncontrar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Altera um projeto para fechado.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerFechar(id: string, options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerFechar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lista todos os projetos.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerListar(options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerListar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lista atividades de um projeto.
     * @param {string} projetoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjetoApi
     */
    public projetoControllerListarAtividades(projetoId: string, options?: RawAxiosRequestConfig) {
        return ProjetoApiFp(this.configuration).projetoControllerListarAtividades(projetoId, options).then((request) => request(this.axios, this.basePath));
    }
}



